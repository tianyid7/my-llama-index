services:
  pgvector:
    hostname: pgvector
    image: ankane/pgvector
    ports:
      - "5431:5432"
    restart: always
    environment:
      - POSTGRES_DB=vectordb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgvector_data:/data
    networks:
      - llamaindex
  postgres:
    image: postgres:15.2-alpine
    command: -c 'max_connections=250'
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-backend_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/data
    networks:
      - llamaindex
  redis:
    image: redis:7.4-alpine
    restart: always
    ports:
      - "6379:6379"
    # docker silently mounts /data even without an explicit volume mount, which enables
    # persistence. explicitly setting save and appendonly forces ephemeral behavior.
    command: redis-server --save "" --appendonly no
    networks:
      - llamaindex
  memgraph:
    image: memgraph/memgraph-mage:latest
    container_name: memgraph-mage
    ports:
      - "7687:7687"
      - "7444:7444"
    command: [ "--log-level=TRACE" ]
    volumes:
      - mg_lib:/var/lib/memgraph
      - mg_log:/var/log/memgraph
    environment:
      - MEMGRAPH_USER=${MEMGRAPH_USER:-memgraph}
      - MEMGRAPH_PASSWORD=${MEMGRAPH_PASSWORD:-memgraph}

  memgraph-lab:
    image: memgraph/lab:latest
    container_name: memgraph-lab
    ports:
      - "3000:3000"
    depends_on:
      - memgraph
    environment:
      - QUICK_CONNECT_MG_HOST=memgraph-mage
      - QUICK_CONNECT_MG_PORT=7687

volumes:
  pgvector_data:
    driver: local
  postgres_data:
    driver: local
  mg_lib:
  mg_log:
  mg_etc:

networks:
  llamaindex:
    driver: bridge
